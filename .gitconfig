[init]
# http://klabgames.tech.blog.jp.klab.com/archives/1033121546.html
templatedir = ~/.git_templates/

[color]
branch = auto
diff   = auto
status = auto

[color "branch"]
current = white red
local   = yellow
remote  = green

[color "diff"]
meta = green
frag = magenta bold
old  = cyan
new  = red

[color "status"]
added     = yellow
changed   = green
untracked = cyan

[color]
ui = true

[core]
whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
editor = vim
excludesfile = ~/.gitignore

[branch]
autosetupmerge = true

[alias]
# base
aliases = !git alias
alias   = !git config --get-regexp '^alias\\.' | sed -e 's/alias\\.\\([^ ]*\\) \\(.*\\)/\\1\\\t => \\2/' | sort -k3

ignore = !( [ ! -e .gitignore ] && touch .gitignore ) | echo $1 >> .gitignore
find   = !git ls-files | grep --ignore-case --color=always
info   = remote show origin
ru     = remote update
sh     = show
st     = status

chmod = "!f() {\
  command=\"git update-index --add --chmod=$@\";\
  git execute-with-echo ${command};\
}; f"

# clone
crone                 = !git clone-with-submodules
clone-with-submodules = clone --recursive

# checkout
co = checkout
ch = checkout HEAD

# pull/fetch/merge/rebase
up = !git update
f  = fetch
fc = fetch
pl = pull --stat
pr = pull --stat --rebase

update = "!f() {\
  command=\"git pull --stat --rebase || ( git rebase --abort && echo 'rebase aborted!!' )\";\
  git execute-with-echo ${command};\
}; f"

# branch
brs      = !git branches
br       = branch
branches = branch -avv

delete-local-fully-merged-branch = branch --delete
delete-local-branch              = branch -D
delete-remote-branch             = push --delete origin

create-branch = "!f() {\
  read -p 'Input commit messages (e.g., #1 create a branch): ' commit_messages;\
  \
  branch_name=$1;\
  original_branch=${2:-origin/master};\
  command=\"git checkout -b ${branch_name} ${original_branch}\";\
  command=${command}\" && git commit --allow-empty --message=' ${commit_messages}'\";\
  command=${command}\" && git push -u origin ${branch_name}\";\
  command=${command}\"; git branches\";\
  \
  git execute-with-confirm ${command};\
}; f"

select-a-branch = "!f() {\
  prompt=${1:-'select a branch:'};\
  branches=($( git branch -r | awk '{print $1}' | peco --prompt \"${prompt}\" ));\
  \
  if [[ ! ${#branches[@]} -eq 1 ]]; then\
    echo 'select only 1 branch.' >&2;\
    exit 1;\
  else\
    echo ${branches};\
  fi;\
}; f"

# add
add-all = !git add . && git add --updaste && git status
ad      = add
at      = add --intent-to-add

# commit
cm = commit --ammend
ci = commit
ca = commit --all

# reset/revert
edit-commits      = "!f() { git rebase --interactive HEAD~$1; }; f"
reset-commits     = !git edit-commits
reset-last-commit = reset --soft HEAD~
undo-add          = reset --soft
rv                = revert

# log
lg    = !git graph
graph = log --graph --pretty=format:\"%Cgreen%h %ci %Cblue%an %Creset%s\"
la    = log --branches --tags --remotes
lo    = log --stat
lp    = log --stat --patch

lg-branches = !git log-branches --graph --pretty=format:'%Cgreen%h\\ %ci\\ %Cblue[C]\\ %cn\\ [A]\\ %an\\ %Creset%s'
lo-branches = !git log-branches --stat
lp-branches = !git log-branches --stat --patch

log-branches = "!f() {\
  branch1=$( git select-a-branch 'select first branch:' ) || exit 1;\
  branch2=$( git select-a-branch 'select another branch:' ) || exit 1;\
  \
  command=\"git log $@ ${branch1}...${branch2}\";\
  git execute-with-confirm ${command};\
}; f"

# diff
di = !git diff-without-space-changes
dc = !git diff-without-space-changes --cached
ds = !git diff-without-space-changes --staged
dw = !git diff-without-space-changes --color-words
dh = !git diff-without-space-changes HEAD
dl = !git diff-without-space-changes --no-index
da = diff HEAD

diff-without-space-changes = diff --ignore-all-space --ignore-blank-lines --ignore-space-at-eol --ignore-space-change
diff-local = diff --no-index

vimdiff = difftool --tool=vimdiff --no-prompt
vimdiff-without-space-changes = !git vimdiff --ignore-all-space --ignore-blank-lines --ignore-space-at-eol --ignore-space-change

compare-branches   = !git diff-branches
diff-stat-branches = !git diff-branches --stat-width=150

diff-branches = "!f() {\
  branch1=$( git select-a-branch 'select first branch:' ) || exit 1;\
  branch2=$( git select-a-branch 'select another branch:' ) || exit 1;\
  \
  command=\"git diff-without-space-changes $@ ${branch1}...${branch2}\";\
  git execute-with-confirm ${command};\
}; f"

open-changed-files = "!f() {\
  branch1=$( git select-a-branch 'select first branch:' ) || exit 1;\
  branch2=$( git select-a-branch 'select another branch:' ) || exit 1;\
  \
  command=\"vim \\$( git diff --name-only $@ ${branch1}...${branch2} )\";\
  git execute-with-confirm ${command};\
}; f"

# show
show-without-diff = show -s

# submodule
su                = !git update-submodules
update-submodules = !git execute-with-echo 'git submodule update --init --recursive && git submodule update --remote && git status'

# hook
update-hooks = !( rm -i .git/hooks/* || exit 0 ) && cp ~/.git_templates/hooks/* .git/hooks/ && ls -l .git/hooks/

# utility
execute-with-echo = "!f() {\
  command=\"$@\";\
  echo '# '${command};\
  eval ${command};\
}; f"

execute-with-confirm = "!f() {\
  command=\"$@\";\
  echo '# '${command};\
  read -p 'Are you sure? [y/n]: ' response;\
  \
  if [[ ${response} =~ ^y ]]; then\
    eval ${command};\
  else\
    echo 'aborted.' >&2;\
  fi;\
}; f"

[github]
user = kg8m

[diff]
algorithm = patience
context = 10
compactionHeuristic = true

[fetch]
prune = true

[pull]
rebase = true

[rerere]
enabled = true

[user]
name  = kg8m
email = takumi.kagiyama@gmail.com
useConfigOnly = true

[submodule]
fetchJobs = 4

[pager]
log  = diff-highlight | less --LINE-NUMBERS
show = diff-highlight | less --LINE-NUMBERS
diff = diff-highlight | less --LINE-NUMBERS

[interactive]
diffFilter = diff-highlight

[commit]
verbose = true

[rebase]
autostash = true

[status]
showUntrackedFiles = all

[include]
path = ~/.gitconfig.local
