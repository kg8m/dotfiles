[init]
# http://klabgames.tech.blog.jp.klab.com/archives/1033121546.html
templatedir = ~/.git_templates/

[github]
user = kg8m

[user]
name  = kg8m
email = takumi.kagiyama@gmail.com
useConfigOnly = true

[branch]
autosetupmerge = true

[color]
branch = auto
diff   = auto
status = auto
ui = true

[color "branch"]
current = white red
local   = yellow
remote  = green

[color "diff"]
meta = green
frag = magenta bold
old  = cyan
new  = red

[color "interactive"]
prompt = 236 yellow bold

[color "status"]
added     = yellow
changed   = green
untracked = cyan

[commit]
verbose = true
cleanup = scissors

[core]
whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol
editor = vim
excludesfile = ~/.gitignore

[diff]
algorithm = patience
context = 10
compactionHeuristic = true
colorMoved = dimmed_zebra
colorMovedWS = ignore-all-space

[fetch]
prune = true

[interactive]
diffFilter = diff-highlight

[mergetool]
keepBackup = false

[pager]
log  = diff-highlight | less --LINE-NUMBERS
show = diff-highlight | less --LINE-NUMBERS
diff = diff-highlight | less --LINE-NUMBERS

[pull]
rebase = true

[rebase]
autostash = true
showCurrentPatch = true

[rerere]
enabled = true

[stash]
showPatch = true

[status]
showUntrackedFiles = all

[submodule]
fetchJobs = 4

[alias]
# base  # {{{
aliases = !git alias
alias   = !git config --get-regexp '^alias\\.' | sed -e 's/alias\\.\\([^ ]*\\) \\(.*\\)/\\1\\\t => \\2/' | sort -k3

info = remote show origin
st   = status

chmod = "!f() {\
  git sh \"execute_with_echo git update-index --add --chmod=$@\";\
}; f"
# }}}

# clone  # {{{
clone-with-submodules = clone --recursive

shallow-clone = "!f() {\
  arguments=\"$@\";\
  git sh \"execute_with_echo git clone --single-branch --depth 1 ${arguments}\";\
}; f"
# }}}

# checkout  # {{{
co = checkout
cos = checkout-by-select

checkout-by-select = "!f() {\
  branch=$( git select-a-branch );\
  [[ \"${branch}\" ]] && git sh \"execute_with_echo git checkout ${branch}\";\
}; f"

# pull/fetch/merge/rebase  # {{{
up = !git update
f  = fetch

update = "!f() {\
  remote_branch=$( git rev-parse --abbrev-ref '@{upstream}' );\
  \
  git sh 'execute_with_echo git --no-pager show --no-patch';\
  git sh 'execute_with_echo git fetch';\
  \
  if [ $( git rev-parse HEAD ) = $( git rev-parse '@{upstream}' ) ]; then\
    echo 'Up to date.';\
  else\
    git sh \"execute_with_echo git --no-pager log --reverse HEAD.. ${remote_branch}\";\
    git sh 'execute_with_echo git pull --stat --rebase';\
  fi;\
}; f"

shallow-update = "!f() {\
  git sh 'execute_with_echo git pull --rebase --depth 1';\
}; f"

update-master = "!f() {\
  current_branch=$( git symbolic-ref --short HEAD );\
  \
  git sh \"\
    execute_with_echo git checkout master && \
    execute_with_echo git update && \
    execute_with_echo git checkout ${current_branch}\
  \";\
}; f"
# }}}

# branch  # {{{
brs      = !git branches
br       = branch
branches = branch --all -vv

delete-fully-merged-local-branch = branch --delete

create-branch = "!f() {\
  original_branch=$1;\
  branch_name=$2;\
  commit_messages=$3;\
  \
  command=\"git checkout -b ${branch_name} ${original_branch}\";\
  command=${command}\" && git commit --allow-empty --message=\\\"${commit_messages}\\\"\";\
  command=${command}\" && git push --set-upstream origin ${branch_name}\";\
  command=${command}\"; git branches\";\
  \
  git sh \"execute_with_confirm '${command}'\";\
}; f"

delete-local-branches  = "!f() {\
  branches=$( git branch | filter | sed -e 's/^[* ]*//' );\
  command=\"for branch in $( echo ${branches} ); do git branch -D \\${branch}; done\";\
  \
  echo 'Selected branches:';\
  for branch in ${branches}; do\
    echo \"  - ${branch}\";\
  done;\
  \
  git sh \"execute_with_confirm '${command}'\";\
  git sh 'execute_with_echo git branches';\
}; f"

delete-remote-branches = "!f() {\
  branches=$( git branch --remote | filter | awk '{ print $1 }' | sed -e 's/^origin\\///' );\
  command=\"for branch in $( echo ${branches} ); do git push --delete origin \\${branch}; done\";\
  \
  echo 'Selected branches:';\
  for branch in ${branches}; do\
    echo \"  - ${branch}\";\
  done;\
  \
  git sh \"execute_with_confirm '${command}'\";\
  git sh 'execute_with_echo git branches';\
}; f"

select-a-branch = "!f() {\
  prompt=${1:-'select a branch:'};\
  branches=($( git branch --all | sed -e 's/^[* ] //' | sed -e 's/remotes\\/origin\\///' | egrep -v '\\->' | sort | uniq | filter --prompt \"${prompt}\" ));\
  \
  if [[ ! ${#branches[@]} -eq 1 ]]; then\
    echo 'select only 1 branch.' >&2;\
    exit 1;\
  else\
    echo ${branches};\
  fi;\
}; f"

select-a-remote-branch = "!f() {\
  prompt=${1:-'select a branch:'};\
  branches=($( git branch --remote | awk '{print $1}' | filter --prompt \"${prompt}\" ));\
  \
  if [[ ! ${#branches[@]} -eq 1 ]]; then\
    echo 'select only 1 branch.' >&2;\
    exit 1;\
  else\
    echo ${branches};\
  fi;\
}; f"
# }}}

# commit  # {{{
ci = commit
ca = commit --all
# }}}

# reset/revert  # {{{
edit-commits      = "!f() { git rebase --interactive $@; }; f"
reset-commits     = !git edit-commits
reset-last-commit = reset --soft HEAD~
undo-add          = reset --soft

# log  # {{{
lg    = !git graph
graph = log --graph --pretty=format:\"%Cgreen%h %ci %Cblue%an %Creset%s\"
la    = log --branches --tags --remotes
lp    = log --stat --patch

lg-branches = !git log-branches --graph --pretty=format:\\\"%Cgreen%h %ci %Cblue[C] %cn [A] %an %Creset%s\\\"
lp-branches = !git log-branches --stat --patch

log-branches = "!f() {\
  branch1=$( git select-a-remote-branch 'select first branch:' ) || exit 1;\
  branch2=$( git select-a-remote-branch 'select another branch:' ) || exit 1;\
  \
  command=\"git log $@ ${branch1}...${branch2}\";\
  git sh \"execute_with_confirm '${command}'\";\
}; f"
# }}}

# diff  # {{{
di = !git diff-without-space-changes
dc = !git diff-without-space-changes --cached
ds = !git diff-without-space-changes --staged
dw = !git diff-without-space-changes --color-words
dh = !git diff-without-space-changes HEAD
dl = !git diff-local-without-space-changes

diff-without-space-changes = diff --ignore-all-space --ignore-blank-lines --ignore-space-at-eol --ignore-space-change
diff-local = diff --no-index
diff-local-without-space-changes = !git diff-without-space-changes --no-index

diff-stat-branches  = !git diff-branches --stat-width = 150

diff-branches = "!f() {\
  branch1=$( git select-a-remote-branch 'select first branch:' ) || exit 1;\
  branch2=$( git select-a-remote-branch 'select another branch:' ) || exit 1;\
  \
  command=\"git diff-without-space-changes $@ ${branch1}...${branch2}\";\
  git sh \"execute_with_confirm ${command}\";\
}; f"

diff-branch-from = "!f() {\
  target=$1;\
  \
  if [[ ! \"${target}\" ]]; then\
    echo 'Specify branch (e.g., \"master\")' >&2;\
    exit 1;\
  fi;\
  \
  current=$( git rev-parse --abbrev-ref '@{upstream}' );\
  command=\"git diff-without-space-changes ${@:2:($#-1)} origin/${target}...${current}\";\
  git sh \"execute_with_confirm '${command}'\";\
}; f"

changed-files-from = "!f() {\
  target=$1;\
  \
  if [[ ! \"${target}\" ]]; then\
    echo 'Specify branch (e.g., \"master\")' >&2;\
    exit 1;\
  fi;\
  \
  current=$( git rev-parse --abbrev-ref '@{upstream}' );\
  command=\"git diff --name-only ${@:2:($#-1)} origin/${target}...${current}\";\
  git sh \"execute_with_echo '${command}'\";\
}; f"
# }}}

# stash  # {{{
stash-all-with-message = "!f() {\
  command=\"git stash push --no-keep-index --include-untracked --message '$@'\";\
  git sh \"execute_with_echo \\\"${command}\\\"\";\
}; f"
# }}}

# show  # {{{
show-without-diff = show -s
# }}}

# submodule  # {{{
update-submodules = !git sh 'execute_with_echo git submodule update --remote --rebase && execute_with_echo git status'
remove-submodules = "!f() {\
  for target in $@; do\
    git sh \"execute_with_echo git submodule deinit $target\";\
    git sh \"execute_with_echo git rm $target\";\
    git sh \"execute_with_echo trash $target\";\
  done;\
}; f"
# }}}

# hook  # {{{
update-hooks = !( rm -i .git/hooks/* || exit 0 ) && cp ~/.git_templates/hooks/* .git/hooks/ && ls -l .git/hooks/
# }}}

# utility  # {{{
sh = "!f() { zsh -c \"source ~/.zsh/my_functions.zsh; $@\"; }; f"
# }}}

[include]
path = ~/.gitconfig.local
