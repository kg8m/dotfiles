# Function  {{{
snippet function
abbr    function {function_name}() { ... }
options word
	function ${1:#:function_name}(${2:#:args}) {
		${0}
	}
# }}}

# If  {{{
snippet if
abbr    if (...) { ... }
options word
	if (${1:#:condition}) {
		${0}
	}

snippet if_else
alias   ife
abbr    if (...) { ... } else { ... }
options head
	if (${1:#:condition}) {
		${0}
	} else {
	}

snippet if_else_if
alias   ifeif
abbr    if (...) { ... } else if (...) { ... } else { ... }
options head
	if (${1:#:condition}) {
		${0}
	} else if () {
	} else {
	}

snippet switch_case
alias   case_switch
alias   switch
abbr    switch (foo) { case bar: { ...; break } }
options head
	switch (${1}) {
		case ${2}: {
			${3}
			break;
		}
	}
# }}}

# Loop  {{{
snippet for
abbr    for (i = 0; i < array.length; i++) { ... }
options head
	for (${1:i} = ${2:0}; $1${3: < array.length}; $1++) {
		${0}
	}

snippet for_of
abbr    for (const item of array) { ... }
options head
	for (const ${1:item} of ${2:array}) {
		${0}
	}

snippet for_in
abbr    for (const prop in object) { ... }
options head
	for (const ${1:prop} in ${2:object}) {
		${0}
	}

snippet while
abbr    while (...) { ... }
options head
	while (${1:#:condition}) {
		${0}
	}
# }}}

# Enumerable  {{{
snippet array_reduce
alias   reduce
abbr    reduce((accumulator, currentValue) => ..., initialValue)
options word
	reduce((${2:#:accumulator}, ${3:#:currentValue}) => ${0}, ${1:#:initialValue})
# }}}

# Try-Catch  {{{
snippet try_catch
alias   try
abbr    try { ... } catch (error) { ... }
options head
	try {
		${0}
	}
	catch (error) {
	}

snippet try_catch_finally
abbr    try { ... } catch (error) { ... } finally { ... }
options head
	try {
		${0}
	}
	catch (error) {
	}
	finally {
	}

snippet try_finally
abbr    try { ... } finally { ... }
options head
	try {
		${0}
	}
	finally {
	}
# }}}

# Timer  {{{
snippet setTimeout
abbr    setTimeout(() => { ... }, {timeout})
options word
	setTimeout(() => {
	  ${0}
	}, ${1:#:timeout})

snippet setInterval
abbr    setInterval(() => { ... }, {interval})
options word
	setInterval(() => {
	  ${0}
	}, ${1:#:interval})
# }}}

# Query Selector  {{{
snippet querySelector
abbr    querySelector({selector})
options word
	querySelector(${1:#:selector})

snippet querySelectorAll
abbr    querySelectorAll({selector})
options word
	querySelectorAll(${1:#:selector})
# }}}

# Event Listener  {{{
snippet addEventListener
abbr    addEventListener({event}, {listenerFunction})
options word
	addEventListener("${1:#:event}", ${2:#:listenerFunction})

snippet addEventListener_DOMContentLoaded
abbr    addEventListener("DOMContentLoaded", {listenerFunction})
regexp  'document\.[addEventListener]*'
options word
	addEventListener("DOMContentLoaded", ${1:#:listenerFunction})

snippet removeEventListener
abbr    removeEventListener({event}, () => { ... }
options word
	removeEventListener("${1:#:event}", ${2:#:listenerFunction})
# }}}

# Module  {{{
snippet import
abbr    import foo from "bar";
options head
	import ${2} from "${1}";
# }}}
