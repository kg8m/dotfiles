snippet assert_raises
abbr    assert_raises({Exception}) { ... }
options head
	assert_raises(${1:#:Exception}) { ${0} }

snippet assert_raises_block
abbr    assert_raises {Exception} do ... end
options head
	assert_raises ${1:#:Exception} do
		${0}
	end

snippet assert_nothing_raised
abbr    assert_nothing_raised { ... }
options head
	assert_nothing_raised { ${0} }

snippet assert_nothing_raised_block
abbr    assert_nothing_raised do ... end
options head
	assert_nothing_raised do
		${0}
	end

snippet assert_difference
abbr    assert_difference -> { ... }, {difference} do ... end
options head
	assert_difference -> { ${1:#:expression} }, ${2:#:difference} do
		${0}
	end

snippet assert_difference_array
abbr    assert_difference [-> { ... }, -> { ... }], {difference} do ... end
options head
	assert_difference [-> { ${1:#:expression1} }, -> { ${2:#:expression2} }], ${3:#:difference} do
		${0}
	end

snippet assert_difference_hash
abbr    assert_difference -> { ... } => {difference} do ... end
options head
	assert_difference -> { ${1:#:expression} } => ${2:#:difference} do
		${0}
	end

snippet assert_no_difference
abbr    assert_no_difference -> { ... } do ... end
options head
	assert_no_difference -> { ${1:#:expression} } do
		${0}
	end

snippet assert_changes
abbr    assert_changes -> { {expression} } do ... end
options head
	assert_changes -> { ${1:#:expression} } do
		${0}
	end

snippet assert_changes_from_to
abbr    assert_changes -> { ... }, from: ..., to: ... do ... end
options head
	assert_changes -> { ${1:#:expression} }, from: ${2:#:from}, to: ${3:#:to} do
		${0}
	end

snippet assert_no_changes
abbr    assert_no_changes -> { ... } do ... end
options head
	assert_no_changes -> { ${1:#:expression} } do
		${0}
	end

snippet assert_redirected_to
abbr    assert_redirected_to {url}
options head
	assert_redirected_to ${1:#:url}

snippet assert_dom_equal
abbr    assert_dom_equal {expected}, {actual}
options head
	assert_dom_equal ${1:#:expected}, :${0:#:actual}

snippet assert_response
abbr    assert_response :{type:success|redirect|missing|error}
options head
	assert_response :${1:success}

snippet assert_template
abbr    assert_template {options}
options head
	assert_template ${1:#:options}

snippet assert_emails
abbr    assert_mails 1 do ... end
options head
	assert_emails ${1:#:number} do
		${0}
	end

snippet assert_no_emails
abbr    assert_no_emails do ... end
options head
	assert_no_emails do
		${0}
	end

snippet assert_enqueued_emails
abbr    assert_enqueued_emails 1 do ... end
options head
	assert_enqueued_emails ${1:#:number} do
		${0}
	end

snippet assert_enqueued_email_with
abbr    assert_enqueued_email_with FooMailer, :bar do ... end
options head
	assert_enqueued_email_with ${1:#:MailerClass}, :${2:#:method_name} do
		${0}
	end

snippet assert_enqueued_email_with_args
abbr    assert_enqueued_email_with FooMailer, :bar, args: [...] do ... end
options head
	assert_enqueued_email_with ${1:#:MailerClass}, :${2:#:method_name}, args: [${3:#:args}] do
		${0}
	end

snippet assert_no_enqueued_emails
abbr    assert_no_enqueued_emails do ... end
options head
	assert_no_enqueued_emails do
		${0}
	end

snippet assert_broadcasts
abbr    assert_broadcasts {stream}, {count} do ... end
options head
	assert_broadcasts ${1:#:stream}, ${2:#:count} do
		${0}
	end

snippet assert_no_broadcasts
abbr    assert_no_broadcasts {stream} do ... end
options head
	assert_broadcasts ${1:#:stream} do
		${0}
	end

snippet assert_broadcasts_with_broadcasting_for
abbr    assert_broadcasts FooChannel.broadcasting_for(foo), {count} do ... end
options head
	assert_broadcasts ${1:#:ChannelClass}.broadcasting_for(${2:#:object}), ${3:#:count} do
		${0}
	end

snippet assert_no_broadcasts_with_broadcasting_for
abbr    assert_no_broadcasts FooChannel.broadcasting_for(foo) do ... end
options head
	assert_broadcasts ${1:#:ChannelClass}.broadcasting_for(${2:#:object}) do
		${0}
	end

snippet assert_broadcast_on
abbr    assert_broadcast_on {stream}, {data} do ... end
options head
	assert_broadcast_on ${1:#:stream}, ${2:#:data} do
		${0}
	end

snippet assert_broadcast_on_with_broadcasting_for
abbr    assert_broadcast_on FooChannel.broadcasting_for(foo), {data} do ... end
options head
	assert_broadcast_on ${1:#:ChannelClass}.broadcasting_for(${2:#:object}), ${3:#:data} do
		${0}
	end
