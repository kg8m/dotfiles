extends ruby-minitest

snippet subject
abbr    subject { ... }
options head
	subject { ${0} }

snippet let
abbr    let(...) { ... }
options head
	let(:${1:#:name}) { ${0} }

snippet let!
abbr    let!(...) { ... }
options head
	let!(:${1:#:name}) { ${0} }

snippet it
abbr    it "{description}" do ... end
options head
	it "${1:#:description}" do
		${0}
	end

snippet example
abbr    example "{description}" do ... end
options head
	example "${1:#:description}" do
		${0}
	end

snippet it_is_expected_to
abbr    it { is_expected.to ... }
options head
	it { is_expected.to ${0} }

snippet it_is_expected_not_to
abbr    it { is_expected.not_to ... }
options head
	it { is_expected.not_to ${0} }

snippet xit
abbr    xit description
options head
	xit description

snippet specify
abbr    specify "{description}" do ... end
options head
	specify "${1:#:description}" do
		${0}
	end

snippet expect_to
alias   expect
abbr    expect(...).to ...
options head
	expect(${1:#:subject}).to ${0}

snippet expect_not_to
abbr    expect(...).not_to ...
options head
	expect(${1:#:subject}).not_to ${0}

snippet expect_block_to
abbr    expect { ... }.to ...
options head
	expect { ${1:#:subject} }.to ${0}

snippet expect_block_not_to
abbr    expect { ... }.not_to ...
options head
	expect { ${1:#:subject} }.not_to ${0}

snippet expect_to_all
abbr    expect(...).to all(some_matcher)
options head
	expect(${1:#:subject}).to all(${2:#:matcher})

snippet expect_to_include
alias   expect_to_any
abbr    expect(...).to include(some_matcher)
options head
	expect(${1:#:subject}).to include(${2:#:matcher})

snippet allow_receive_and_wrap_original_without_args
abbr    allow(...).to receive(:...).and_wrap_original {|original_method| ... }
options head
	allow(${1:#:target}).to receive(:${2:#:method_name}).and_wrap_original do |original_method|
		original_method.call
		${0}
	end

snippet allow_receive_and_wrap_original_full
abbr    allow(...).to receive(:...).and_wrap_original {|original_method, *args, **kwargs, &block| ... }
options head
	allow(${1:#:target}).to receive(:${2:#:method_name}).and_wrap_original do |original_method, *args, **kwargs, &block|
		original_method.call(*args, **kwargs, &block)
		${0}
	end

snippet allow_receive_and_wrap_original_args
abbr    allow(...).to receive(:...).and_wrap_original {|original_method, *args| ... }
options head
	allow(${1:#:target}).to receive(:${2:#:method_name}).and_wrap_original do |original_method, *args|
		original_method.call(*args)
		${0}
	end

snippet allow_receive_and_wrap_original_kwargs
abbr    allow(...).to receive(:...).and_wrap_original {|original_method, **kwargs| ... }
options head
	allow(${1:#:target}).to receive(:${2:#:method_name}).and_wrap_original do |original_method, **kwargs|
		original_method.call(**kwargs)
		${0}
	end

snippet allow_receive_and_wrap_original_block
abbr    allow(...).to receive(:...).and_wrap_original {|original_method, &block| ... }
options head
	allow(${1:#:target}).to receive(:${2:#:method_name}).and_wrap_original do |original_method, &block|
		original_method.call(&block)
		${0}
	end

snippet allow_receive_and_call_original
abbr    allow(...).to receive(:...).and_call_original
options head
	allow(${1:#:target}).to receive(:${2:#:method_name}).and_call_original

snippet describe
abbr    describe ... do ... end
options head
	describe ${1:`substitute(substitute(vim_snippets#Filename(), '_spec$', '', ''), '\(_\|^\)\(.\)', '\u\2', 'g')`} do
		${0}
	end

snippet context
abbr    context "{context}" do ... end
options head
	context "${1:#:context}" do
		${0}
	end

snippet before
abbr    before do ... end
options head
	before do
		${0}
	end

snippet before_each
abbr    before :each do ... end
options head
	before :each do
		${0}
	end

snippet before_all
abbr    before :all do ... end
options head
	before :all do
		${0}
	end

snippet after
abbr    after do ... end
options head
	after do
		${0}
	end

snippet after_each
abbr    after :each do ... end
options head
	after :each do
		${0}
	end

snippet after_all
abbr    after :all do ... end
options head
	after :all do
		${0}
	end

snippet pending
abbr    pending "..." do ... end
options head
	pending "${1}" do
		${0}
	end

snippet shared_examples
abbr    shared_examples ...
options head
	shared_examples "${1:#:shared examples name}" do
		${0}
	end

snippet shared_examples_for
abbr    shared_examples_for ...
options head
	shared_examples_for "${1:#:shared examples name}" do
		${0}
	end

snippet it_behaves_like
abbr    it_behaves_like ...
options head
	it_behaves_like "${0:#:shared examples name}"

snippet contain_exactly
abbr    contain_exactly(item1, item2, ...)
options word
	contain_exactly(${1:#:item1})

snippet match_array
alias   match_array_ignoring_order
abbr    match_array(array)
options word
	match_array(${1:#:array})

snippet change_by
abbr    change({receiver}, :{method}).by({difference})
options word
	change(${1:#:receiver}, :${2:#:method}).by(${3:#:difference})

snippet change_from_to
abbr    change({receiver}, :{method}).from({from}).to({to})
options word
	change(${1:#:receiver}, :${2:#:method}).from(${3:#:from}).to(${4:#:to})

snippet change_by_block
abbr    change { {subject} }.by({difference})
options word
	change { ${1:#:subject} }.by(${2:#:difference})

snippet change_from_to_block
abbr    change { {subject} }.from({from}).to({to})
options word
	change { ${1:#:subject} }.from(${2:#:from}).to(${3:#:to})
