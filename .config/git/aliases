#!/usr/bin/env zsh
source ~/.config/zsh/my-functions.zsh

function git:add:bulk {
  local files=("${(@f)$(git:status:filter:unstaged:with_untracked)}")

  if [ -n "${files[*]}" ]; then
    execute_with_echo    "git add --intent-to-add -- ${files[*]}"
    execute_with_echo    "git diff -- ${files[*]}"
    execute_with_confirm "git add -- ${files[*]}"
    execute_with_echo    "git status-with-color"
  fi
}

function git:add:bulk:intent {
  local files=("${(@f)$(git:status:filter:untracked)}")

  if [ -n "${files[*]}" ]; then
    execute_with_echo "git add --intent-to-add -- ${files[*]}"
    execute_with_echo "git status-with-color"
  fi
}

function git:add:bulk:patch {
  local files=("${(@f)$(git:status:filter:unstaged:with_intended_to_add)}")

  if [ -n "${files[*]}" ]; then
    execute_with_echo "git add --patch -- ${files[*]}"
    execute_with_echo "git status-with-color"
  fi
}

function git:restore:bulk {
  local files=("${(@f)$(git:status:filter:unstaged)}")

  if [ -n "${files[*]}" ]; then
    execute_with_echo    "git diff -R -- ${files[*]}"
    execute_with_confirm "git restore -- ${files[*]}"
    execute_with_echo    "git status-with-color"
  fi
}

function git:restore:bulk:staged {
  local files=("${(@f)$(git:status:filter:staged)}")

  if [ -n "${files[*]}" ]; then
    execute_with_echo    "git diff --staged -R -- ${files[*]}"
    execute_with_confirm "git restore --staged -- ${files[*]}"
    execute_with_echo    "git status-with-color"
  fi
}

function git:restore:bulk:staged:patch {
  local files=("${(@f)$(git:status:filter:staged)}")

  if [ -n "${files[*]}" ]; then
    execute_with_echo "git restore --staged --patch -- ${files[*]}"
    execute_with_echo "git status-with-color"
  fi
}

function git:switch:select {
  local current="$(git branch --show-current)"
  local branch="$(
    git:branch:list --all |
      grep -E -v "^${current} " |
      git:branch:filter:single
  )"

  [ -n "${branch}" ] && execute_with_echo "git switch ${branch}"
}

function git:switch:main {
  if git branch --contains main > /dev/null 2>&1; then
    git switch main
  else
    git switch master
  fi
}

function git:update:with_log {
  local remote_branch="$(git rev-parse --abbrev-ref '@{upstream}')"

  execute_with_echo "git --no-pager show --no-patch"
  execute_with_echo "git fetch"

  if [ "$(git rev-parse HEAD)" = "$(git rev-parse '@{upstream}')" ]; then
    echo "Up to date."
  else
    execute_with_echo "git --no-pager log --reverse HEAD... ${remote_branch}"
    execute_with_echo "git pull --stat"
    execute_with_echo "git status-with-color"
  fi
}

function git:update:shallow {
  execute_with_echo "git pull --rebase --depth 1"
}

function git:update:main {
  local current_branch="$(git branch --show-current)"

  execute_with_echo "git switch-to-main"

  if [[ "$(git branch --show-current)" =~ ^(main|master)$ ]]; then
    execute_with_echo "git update"
    execute_with_echo "git switch ${current_branch}"
    execute_with_echo "git branches"
  else
    echo:error "Switching branch failed."
    return 1
  fi
}

function git:branch:create:with_set_upstream {
  if git status --porcelain | grep -E '^[^ ?]' -q; then
    echo:error "Staged changes exist. Unstage them before creating a branch."
    return 1
  fi

  local original_branch="$1"
  local branch_name="$2"
  local commit_message="$3"

  # shellcheck disable=SC2034
  local commands=(
    "execute_with_echo 'git switch --create ${branch_name} ${original_branch}'"
    "execute_with_echo 'git commit --allow-empty --message=\"${commit_message}\"'"
    "execute_with_echo 'git push --set-upstream origin ${branch_name}'"
  )

  execute_with_confirm "${(j: && :)commands}; execute_with_echo 'git branches'"
}

function git:branch:delete:bulk:local {
  local branches=("${(@f)$(
    git:branch:list |
      grep -E -v "${GIT_PROTECTED_LOCAL_BRANCH_PATTERN}" |
      git:branch:filter
  )}")

  if [ -n "${branches[*]}" ]; then
    execute_with_confirm "git branch --delete --force ${branches[*]}"
    execute_with_echo    "git branches"
  else
    echo "No target branches."
  fi
}

function git:branch:delete:bulk:remote {
  local branches=("${(@f)$(
    git:branch:list --remote |
      grep -E -v "${GIT_PROTECTED_REMOTE_BRANCH_PATTERN}" |
      git:branch:filter
  )}")

  if [ -n "${branches[*]}" ]; then
    execute_with_confirm "git push --delete origin ${branches[*]}"
    execute_with_echo    "git branches"
  else
    echo "No target branches."
  fi
}

function git:branch:filter {
  local options=(
    --prompt="Select branches> "
    --preview-window="down:75%:wrap:nohidden"
    --preview="git sh \"git:utility:preview:log {1}\""
    "$@"
  )

  filter "${options[@]}" | awk '{ print $1 }'
}

function git:branch:filter:single {
  local options=("$@")
  local branches=("${(@f)$(
    git:branch:filter --no-multi --prompt="Select a branch> " "${options[@]}"
  )}")

  if [ ${#branches[@]} -ne 1 ] || [ -z "${branches[1]}" ]; then
    echo:error "Select a branch."; exit 1
  else
    echo "${branches[1]}"
  fi
}

function git:branch:list {
  local SEP="$(git:branch:list_format_separator)"

  git branch --format "$(git:branch:list_format)" "$@" |
    git:proxy:sed -e "s/\s*${SEP}\s*/${SEP}/g" -e 's/^origin\///' |
    grep -E -v "^HEAD${SEP}" |
    grep -E "^[a-zA-Z0-9]" |  # Remove branches with illegal characters
    git:proxy:column "${SEP}" |
    awk '!x[$1]++' |  # Remove duplicated branches
    git:branch:colorize
}

function git:branch:list:all {
  local SEP="$(git:branch:list_format_separator)"

  git branch --all --format "%(HEAD) $(git:branch:list_format)" "$@" |
    git:proxy:sed -e "s/\s*${SEP}\s*/${SEP}/g" |
    grep -E -v "^\s+origin/HEAD${SEP}" |
    git:proxy:column "${SEP}" |
    git:branch:colorize
}

function git:branch:list_format {
  local SEP="$(git:branch:list_format_separator)"
  # shellcheck disable=SC2034
  local items=(
    "%(refname:short)"
    "%(objectname:short)"
    "%(authorname)"
    "%(authordate:short)"
    "%(contents:subject)"
  )

  # shellcheck disable=SC2250
  echo "${(pj:$SEP:)items}"
}

function git:branch:list_format_separator {
  echo "ðŸ’©"
}

function git:branch:colorize {
  local ESC="$(printf '\e')"
  local USER_NAME="$(git config user.name)"

  git:proxy:sed \
    -e "s/\b\(${USER_NAME}\)/${ESC}[1;38;5;219m\1${ESC}[0m/" \
    -e "s/\b\(origin\/[^ ]\+\)/${ESC}[0;38;5;10m\1${ESC}[0m/" \
    -e "s/^\(\s\+\)\([^ ]\+\)/\1${ESC}[0;38;5;11m\2${ESC}[0m/" \
    -e "s/^\* \([^ ]\+\)/* ${ESC}[1;48;5;1m\1${ESC}[0m/"
}

function git:clone:shallow {
  execute_with_echo "git clone --single-branch --depth 1 $*"
}

function git:commit:bulk {
  local files=("${(@f)$(git:status:filter:all)}")

  if [ -n "${files[*]}" ]; then
    execute_with_echo    "git commit --dry-run -- ${files[*]} | git pager"
    execute_with_confirm "git commit -- ${files[*]}"
    execute_with_echo    "git status-with-color"
  fi
}

function git:push:revision {
  local revision="$1"

  if [ -z "${revision}" ]; then
    echo:error "Specify a revision."
    return 1
  fi

  local branch="$(git branch --show-current)"

  git push origin "${revision}:refs/heads/${branch}"
}

function git:clean:bulk {
  local files=("${(@f)$(git:status:filter:untracked)}")

  if [ -n "${files[*]}" ]; then
    git:utility:cat      "${files[@]}"
    execute_with_confirm "git clean --force -- ${files[*]}"
    execute_with_echo    "git status-with-color"
  fi
}

function git:log:compare:branch {
  local branch1=$(git:branch:list --remote | git:branch:filter:single --prompt="Select first branch> ")
  [ -n "${branch1}" ] || exit 1

  local branch2=$(git:branch:list --remote | git:branch:filter:single --prompt="Select another branch> ")
  [ -n "${branch2}" ] || exit 1

  execute_with_confirm "git log $* origin/${branch1}...origin/${branch2}"
}

function git:diff:branch {
  local branch1=$(git:branch:list --remote | git:branch:filter:single --prompt="Select first branch> ")
  [ -n "${branch1}" ] || exit 1

  local branch2=$(git:branch:list --remote | git:branch:filter:single --prompt="Select another branch> ")
  [ -n "${branch2}" ] || exit 1

  execute_with_confirm "git diff-without-space-changes $* origin/${branch1}...origin/${branch2}"
}

function git:diff:branch:from {
  local target="$1"

  if [ -n "${target}" ]; then
    local options=()
    local pathspecs=()

    local item
    for item in "${@[2,-1]}"; do
      if [ "${item}" = "--" ] || [ "${#pathspecs[@]}" -gt 0 ]; then
        pathspecs+=("${item}")
      else
        options+=("${item}")
      fi
    done

    execute_with_confirm "git diff-without-space-changes ${options[*]} origin/${target}... ${pathspecs[*]}"
  else
    echo:error "Specify a branch name, e.g., \"main\"."; exit 1
  fi
}

function git:diff:branch:from:nameonly {
  git:diff:branch:from "$1" --name-only "${@[2,-1]}"
}

function git:stash:all:with_message {
  # Make all changes staged before `git stash` instead of using `--include-untracked` option. Untracked files stashed
  # with `--include-untracked` aren't shown in diffs, i.e., `git diff ...stash@{0}` doesn't contain the untracked files.
  execute_with_confirm "git add --all && git stash push --no-keep-index --message '$*'"
}

function git:status:color {
  local local_branch="$(git branch --show-current)"
  local local_branch_message_prefix="On branch"
  local local_branch_pattern="^${local_branch_message_prefix} ${local_branch}$"
  local local_branch_replace="${local_branch_message_prefix} $(highlight:magenta "${local_branch}")"

  local remote_branch="$(git rev-parse --abbrev-ref --symbolic-full-name "@{u}")"
  local remote_branch_message_prefix="Your branch is"
  local remote_branch_pattern="^\\(${remote_branch_message_prefix} .\\+\\) '${remote_branch}'\\(.\\+\\)$"
  local remote_branch_replace="\\1 '$(highlight:magenta "${remote_branch}")'\\2"

  local ok_message="nothing to commit, working tree clean"
  local ok_pattern="^${ok_message}$"
  local ok_replace="$(highlight:green "${ok_message}")"

  git -c color.status=always status "$@" |
    git:proxy:sed \
      -e "s!${local_branch_pattern}!${local_branch_replace}!" \
      -e "s!${remote_branch_pattern}!${remote_branch_replace}!" \
      -e "s/${ok_pattern}/${ok_replace}/"
}

# SC2120: references arguments, but none are ever passed.
# shellcheck disable=SC2120
function git:status:filter:all {
  git status --short "$@" | git:status:utility:filter
}

function git:status:filter:staged {
  # `^ A` for intent-to-add
  git status --short | grep -E '^[^ ?]|^ A' | git:status:utility:filter
}

function git:status:filter:unstaged {
  git status --short | grep -E '^[^?][^ A]' | git:status:utility:filter
}

function git:status:filter:unstaged:with_intended_to_add {
  git status --short | grep -E '^[^?][^ ]' | git:status:utility:filter
}

function git:status:filter:unstaged:with_untracked {
  git status --short | grep -E '^.[^ ]' | git:status:utility:filter
}

function git:status:filter:untracked {
  git status --short | grep -E '^\?\?' | git:status:utility:filter
}

function git:status:utility:filter {
  local filter_options=(
    --prompt "Select files> "
    --preview-window "down:75%:wrap:nohidden"
    --preview "git diff-or-cat '{2..}'"
  )

  filter "${filter_options[@]}" | git:proxy:sed -e 's/^..\s//'
}

function git:submodule:update {
  execute_with_echo "git submodule update --remote --rebase"
  execute_with_echo "git status-with-color"
}

function git:submodule:remove:bulk {
  local targets=("${(@f)$(git submodule | filter | awk '{ print $2 }')}")
  local target

  for target in "${targets[@]}"; do
    execute_with_confirm "git submodule deinit ${target}"
    execute_with_confirm "git rm ${target}"
    execute_with_confirm "trash ${target}"
  done
}

function git:submodule:deinit:bulk {
  local targets=("${(@f)$(git submodule | filter | awk '{ print $2 }')}")
  local target

  for target in "${targets[@]}"; do
    execute_with_confirm "git submodule deinit -f ${target}"
    execute_with_confirm "rm -r ./git/modules/${target}"
    execute_with_confirm "trash ${target}/*"
    execute_with_confirm "trash ${target}/.*"
  done
}

function git:alias:list {
  git config --get-regexp '^alias\.' |
    git:proxy:sed -e 's/alias\.\([^ ]*\) \(.*\)/\1\t => \2/'
}

function git:alias:which {
  local command="$1"

  if [ -z "${command}" ]; then
    echo:error "Specify a command name."
    return 1
  fi

  local result="$(git:alias:list | grep -E "^${command}\s+" | git:proxy:sed -e 's/\s\+/ /')"
  echo "${result}"

  if [[ "${result}" =~ \ sh\ [\"\']?git:[a-z_:]+ ]]; then
    echo
    # shellcheck disable=SC2230
    which "$(echo "${result}" | grep -E -o '\bgit:[a-z_:]+')"
  else
    local original="$(echo "${result}" | grep -E -o '=> [-a-z]+' | sed -e 's/=> //')"

    if git:alias:list | grep -q -E "^${original}\s+"; then
      echo
      git:alias:which "${original}"
    fi
  fi
}

function git:utility:chmod {
  execute_with_echo "git update-index --add --chmod=$1"
}

function git:utility:diff_or_cat {
  local filepath="$1"
  local git_status="$(git status --short -- "${filepath}")"

  # Untracked files
  if [[ "${git_status}" =~ '^\?\?' ]]; then
    git:utility:cat "${filepath}"
  # Renamed files
  elif [[ "${git_status}" =~ ^D ]] && git status --short | grep -F "R  ${filepath} ->" -q; then
    local removed="${filepath}"
    local added="$(git status --short | grep -F "R  ${filepath} ->" | git:proxy:sed -e 's/^.* -> //')"

    git:utility:diff --staged -- "${removed}" "${added}"
  # Partially staged files
  elif [[ "${git_status}" =~ ^[A-Z]{2} ]]; then
    git:utility:header "Staged"
    git:utility:diff --staged -- "${filepath}"
    echo
    git:utility:header "Not Staged"
    git:utility:diff -- "${filepath}"
  # Staged files
  elif [[ "${git_status}" =~ ^[A-Z] ]]; then
    git:utility:diff --staged -- "${filepath}"
  # Others: unstaged tracked files
  else
    git:utility:diff -- "${filepath}"
  fi
}

function git:utility:header {
  local border="$(printf "%s" "${(r:${COLUMNS} / 3::-:)}")"

  printf "\e[1m"
  printf "%s\n" "${border}"
  printf "%s\n" "$@"
  printf "%s\n" "${border}"
  printf "\e[0m"
}

function git:utility:cat {
  local filepath
  local filepaths=("$@")

  if [ -z "${filepaths[*]}" ]; then
    return 1
  fi

  local realpaths=()

  for filepath in "${filepaths[@]}"; do
    # Expand `~` because bat can't expand it.
    realpaths+=("${filepath/\~/${HOME}}")
  done

  bat "${realpaths[@]}"
}

function git:utility:diff {
  git diff-without-space-changes --color=always "$@" | git pager
}

function git:utility:preview:log {
  local branch="$1"

  if ! git branch --contains "${branch}" > /dev/null 2>&1; then
    branch="origin/${branch}"
  fi

  git log --max-count=100 --color=always "${branch}"
}

# Use short options like `-t` or `-s` because BSD `column` command doesn't support long options like `--table` or
# `--separator`.
# The local variable `dummy` is for newer `column` command. Newer `column` command removes leading whitespaces. So
# prevent it by putting a dummy text on the top of each line.
function git:proxy:column {
  local separator="${1:?}"
  local dummy="@"

  git:proxy:sed -e "s/^/${dummy}/" |
    column -t -s "${separator}" |
    git:proxy:sed -e "s/^${dummy}//"
}

function git:proxy:sed {
  if command -v gsed > /dev/null; then
    gsed "$@"
  else
    sed "$@"
  fi
}

function git:proxy:wc {
  if command -v gwc > /dev/null; then
    gwc "$@"
  else
    wc "$@"
  fi
}
