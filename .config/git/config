[github]
	user = kg8m

[user]
	name  = kg8m
	email = takumi.kagiyama@gmail.com
	useConfigOnly = true
	signingkey = 999EA51A6544E454

[url "git@github.com:"]
	pushInsteadOf = https://github.com/

[url "git@gitlab.com:"]
	pushInsteadOf = https://gitlab.com/

[init]
	defaultBranch = main

[branch]
	autosetupmerge = true
	sort = -authordate

[color]
	branch = auto
	diff   = auto
	status = auto
	ui = true

[color "branch"]
	current = white red
	local   = yellow
	remote  = green

[color "diff"]
	meta = yellow
	frag = magenta bold
	old  = red
	new  = green

	# #2c0001 is 25% darker than #370001 (delta’s original minus red).
	# #001d00 is 25% darker than #002400 (delta’s original plus green).
	oldMoved = "white #2c0001 italic"
	newMoved = "white #001d00 italic"

[color "interactive"]
	prompt = 236 yellow bold

[color "status"]
	added     = yellow
	changed   = green
	untracked = cyan
	unmerged  = red

[commit]
	verbose = true
	cleanup = scissors
	gpgsign = true

[core]
	whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
	editor = vim
	excludesfile = ~/.config/git/ignore
	hooksPath = ~/.config/git/hooks
	pager = git pager

	# Avoid broken filepaths which contain multibyte characters.
	quotepath = false

[delta]
	# Disable background color in source code area.
	blame-code-style = "syntax"

	# {commit:<15}
	#   cf. `--abbrev=14` of `git log-graph`
	#   cf. `find_hash` in `git:log:filter:hash`
	#   cf. `git blame --abbrev=13` in `git:blame:filter`
	blame-format = "{timestamp:<20} {author:<15.14} {commit:<15}"

	blame-palette = "#330d0d #33190d #33260d #33330d #26330d #19330d #0d330d #0d3319 #0d3326 #0d3333 #0d2633 #0d1933 #0d0d33 #190d33 #260d33 #330d33 #330d26 #330d19"
	blame-timestamp-output-format = "%Y/%m/%d %H:%M:%S"

	line-numbers = true
	line-numbers-minus-style = "red auto"
	line-numbers-zero-style = "#999999 auto"
	line-numbers-plus-style = "green auto"

	# Default: left = "{nm:^4}⋮", right = "{np:^4}│"
	# `^` means center aligned but `>` means right aligned.
	line-numbers-left-format = "{nm:>4} ⋮"
	line-numbers-right-format = "{np:>4} │"

	file-style = "yellow auto bold"
	file-decoration-style = "yellow ul ol"
	hunk-header-style = "line-number syntax"
	hunk-header-decoration-style = "#666666 box"

	minus-style = "syntax auto"

	# cf. color.diff.oldMoved and color.diff.newMoved
	map-styles = "white #2c0001 italic => syntax #2c0001 italic, white #001d00 italic => syntax italic"

[diff]
	algorithm = histogram
	context = 10
	compactionHeuristic = true
	colorMoved = plain
	colorMovedWS = ignore-all-space
	renames = true
	submodule = diff

	# Disable because some tools to apply patches don’t work
	noprefix = false

[diff "gitconfig"]
	xfuncname = "^\\[.+\\]$"

[diff "rails_credentials"]
	textconv = "[ \"${USE_GIT_RAILS_CREDENTIALS:-}\" = \"1\" ] && bin/rails credentials:diff \"$@\" || cat"

[diff "rspec"]
	xfuncname = "^[ \t]*((RSpec|describe|context|it|before|after|around|feature|scenario)[ \t].+)$"

[diff "vim"]
	xfuncname = "^^[ \t]*((export[ \t])?(class|def|function|interface)[ \t].+)$$"

[diff "vimsnippet"]
	xfuncname = "^snippet .+$"

[fetch]
	prune = true

[interactive]
	diffFilter = git diff_filter

[merge]
	tool = vimdiff
	conflictStyle = diff3

[mergetool]
	keepBackup = false

[pager]
	log  = git pager
	show = git pager
	diff = git pager

[pull]
	rebase = true

[push]
	useForceIfIncludes = true

[rebase]
	autostash = true
	showCurrentPatch = true

[rerere]
	enabled = true

[stash]
	showPatch = true

[status]
	showUntrackedFiles = all

[submodule]
	fetchJobs = 4

[alias]
	# add
	add-by-select             = sh git:add:bulk
	add-with-intent-by-select = sh git:add:bulk:intent
	add-by-patch-by-select    = sh git:add:bulk:patch

	# restore
	unstage = restore --staged

	restore-by-select          = sh git:restore:bulk
	restore-by-patch-by-select = sh git:restore:bulk:patch
	restore-by-select-staged   = sh git:restore:bulk:staged
	unstage-by-select          = sh git:restore:bulk:staged
	unstage-by-patch-by-select = sh git:restore:bulk:staged:patch

	# clone
	clone-with-submodules = clone --recursive

	clone-shallow = sh git:clone:shallow
	clone-partial = sh git:clone:partial:treeless
	clone-partial-blobless = sh git:clone:partial:blobless
	clone-partial-treeless = sh git:clone:partial:treeless

	# switch
	sw  = switch
	sws = switch-by-select

	switch-by-select = sh git:switch:select

	switch-to-main   = sh git:switch:main
	switch-to-master = sh git:switch:main

	# checkout
	co = checkout

	# pull/fetch/merge/rebase
	up = update
	f  = fetch

	update         = sh git:update:with_log
	update-shallow = sh git:update:shallow
	update-main    = sh git:update:main
	update-master  = sh git:update:main

	# branch
	brs = branches
	br  = branch

	branches = sh git:branch:list:all

	create-branch        = sh git:branch:create
	create-hotfix-branch = sh git:branch:create:hotfix

	branch-delete-fully-merged-local = branch --delete
	branch-delete-locals             = sh git:branch:delete:bulk:local
	branch-delete-remotes            = sh git:branch:delete:bulk:remote

	delete-fully-merged-local-branch = branch --delete
	delete-local-branches            = sh git:branch:delete:bulk:local
	delete-remote-branches           = sh git:branch:delete:bulk:remote

	# commit
	ci = commit

	commit-by-select = sh git:commit:bulk

	# push
	push-with-revision = sh git:push:revision

	# reset/revert
	reset-commits     = rebase --interactive
	reset-last-commit = reset --soft HEAD~

	# clean
	clean-by-select = sh git:clean:bulk
	trash-by-select = sh git:trash:bulk

	# log
	l  = log-by-select
	lg = log-graph
	la = log --branches --tags --remotes
	lp = log-with-patch

	log-by-select = sh git:log:select

	# --abbrev=14
	#   cf. `{commit:<15}` of `delta.blame-format`
	#   cf. `find_hash` in `git:log:filter:hash`
	#   cf. `git blame --abbrev=13` in `git:blame:filter`
	# --pretty=format
	#   %an = author name
	#   %ai = author date, ISO 8601-like format
	#   %d  = ref names, like the --decorate option of git-log(1)
	#   %h  = abbreviated commit hash
	#   %s  = subject
	log-graph      = log --graph --abbrev=14 --pretty=format:\" %C(yellow)%h %C(cyan)%ai %C(green bold)%an %C(magenta)%d %C(reset)%s\"
	log-with-patch = log --stat --patch

	log-graph-branches = sh git:log:compare:branch --graph --abbrev=14 --pretty='format: %C(yellow)%h %C(cyan)%ai %C(green bold)[C] %cn [A] %an  %C(reset)%s'
	log-with-patch-branches = sh git:log:compare:branch --stat --patch

	# diff
	di = diff-without-space-changes
	ds = diff-without-space-changes --staged
	dh = diff-without-space-changes HEAD

	diff-without-space-changes = diff --ignore-all-space --ignore-blank-lines --color-moved-ws=allow-indentation-change

	diff-stat-branches = diff-branches --stat-width 150

	diff-branches             = sh git:diff:branch
	diff-branch-from          = sh git:diff:branch:from
	diff-branch-from-nameonly = sh git:diff:branch:from:nameonly

	# stash
	ss  = stash
	ssa = stash-all-with-message
	sss = stash-by-select

	stash-all-with-message = sh git:stash:all:with_message
	stash-by-select        = sh git:stash:select

	# status
	st = status-with-color

	status-with-filter = sh git:status:filter:all
	status-with-color  = sh git:status:color

	# cherry-pick
	cp   = cherry-pick
	p    = cherry-pick
	pick = cherry-pick

	# blame
	bl = blame-with-filter

	blame-with-filter = sh git:blame:filter

	# submodule
	submodule-update-all = sh git:submodule:update
	submodule-remove     = sh git:submodule:remove:bulk
	submodule-deinit     = sh git:submodule:deinit:bulk

	# utility
	aliases = sh git:alias:list
	which   = sh git:alias:which

	chmod       = sh git:utility:chmod
	diff-or-cat = sh git:utility:diff_or_cat

[include]
	path = ~/.config/git.local/config
